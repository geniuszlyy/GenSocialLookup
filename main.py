import requests
import time
from colorama import Fore, init

class GenSocialLookup:
    def __init__(self):
        init(autoreset=True)
        self.username = ""
        self.output_file = "result.txt"
        self.platforms = {
            "Instagram": {"url": "https://www.instagram.com/{}", "check": lambda response: 'The link you followed may be broken' not in response.text},
            "Facebook": {"url": "https://www.facebook.com/{}", "check": lambda response: response.status_code == 200},
            "Twitter": {"url": "https://twitter.com/{}", "check": lambda response: response.status_code == 200},
            "YouTube": {"url": "https://www.youtube.com/{}", "check": lambda response: response.status_code == 200},
            "Blogger": {"url": "https://{}.blogspot.com", "check": lambda response: response.status_code == 200},
            "GooglePlus": {"url": "https://plus.google.com/+{}", "check": lambda response: response.status_code == 200},
            "Reddit": {"url": "https://www.reddit.com/user/{}", "check": lambda response: response.status_code == 200},
            "Wordpress": {"url": "https://{}.wordpress.com", "check": lambda response: response.status_code == 200},
            "Pinterest": {"url": "https://www.pinterest.com/{}", "check": lambda response: response.status_code == 200},
            "GitHub": {"url": "https://www.github.com/{}", "check": lambda response: response.status_code == 200},
            "Tumblr": {"url": "https://{}.tumblr.com", "check": lambda response: response.status_code == 200},
            "Flickr": {"url": "https://www.flickr.com/photos/{}", "check": lambda response: response.status_code == 200},
            "Steam": {"url": "https://steamcommunity.com/id/{}", "check": lambda response: response.status_code == 200},
            "Vimeo": {"url": "https://vimeo.com/{}", "check": lambda response: response.status_code == 200},
            "SoundCloud": {"url": "https://soundcloud.com/{}", "check": lambda response: response.status_code == 200},
            "Disqus": {"url": "https://disqus.com/{}", "check": lambda response: response.status_code == 200},
            "Medium": {"url": "https://medium.com/@{}", "check": lambda response: response.status_code == 200},
            "DeviantART": {"url": "https://{}.deviantart.com", "check": lambda response: response.status_code == 200},
            "VK": {"url": "https://vk.com/{}", "check": lambda response: response.status_code == 200},
            "About.me": {"url": "https://about.me/{}", "check": lambda response: response.status_code == 200},
            "Imgur": {"url": "https://imgur.com/user/{}", "check": lambda response: response.status_code == 200},
            "Flipboard": {"url": "https://flipboard.com/@{}", "check": lambda response: response.status_code == 200},
            "SlideShare": {"url": "https://slideshare.net/{}", "check": lambda response: response.status_code == 200},
            "Fotolog": {"url": "https://fotolog.com/{}", "check": lambda response: response.status_code == 200},
            "Spotify": {"url": "https://open.spotify.com/user/{}", "check": lambda response: response.status_code == 200},
            "MixCloud": {"url": "https://www.mixcloud.com/{}", "check": lambda response: response.status_code == 200},
            "Scribd": {"url": "https://www.scribd.com/{}", "check": lambda response: response.status_code == 200},
            "Badoo": {"url": "https://www.badoo.com/en/{}", "check": lambda response: response.status_code == 200},
            "Bitbucket": {"url": "https://bitbucket.org/{}", "check": lambda response: response.status_code == 200},
            "Dailymotion": {"url": "https://www.dailymotion.com/{}", "check": lambda response: response.status_code == 200},
            "Etsy": {"url": "https://www.etsy.com/shop/{}", "check": lambda response: response.status_code == 200},
            "Cashme": {"url": "https://cash.me/{}", "check": lambda response: response.status_code == 200},
            "Behance": {"url": "https://www.behance.net/{}", "check": lambda response: response.status_code == 200},
            "Goodreads": {"url": "https://www.goodreads.com/{}", "check": lambda response: response.status_code == 200},
            "Instructables": {"url": "https://www.instructables.com/member/{}", "check": lambda response: response.status_code == 200},
            "Keybase": {"url": "https://keybase.io/{}", "check": lambda response: response.status_code == 200},
            "Kongregate": {"url": "https://www.kongregate.com/accounts/{}", "check": lambda response: response.status_code == 200},
            "Livejournal": {"url": "https://{}.livejournal.com", "check": lambda response: response.status_code == 200},
            "AngelList": {"url": "https://angel.co/{}", "check": lambda response: response.status_code == 200},
            "Last.fm": {"url": "https://www.last.fm/user/{}", "check": lambda response: response.status_code == 200},
            "Dribbble": {"url": "https://dribbble.com/{}", "check": lambda response: response.status_code == 200},
            "Codecademy": {"url": "https://www.codecademy.com/profiles/{}", "check": lambda response: response.status_code == 200},
            "Gravatar": {"url": "https://en.gravatar.com/{}", "check": lambda response: response.status_code == 200},
            "Pastebin": {"url": "https://pastebin.com/u/{}", "check": lambda response: response.status_code == 200},
            "Foursquare": {"url": "https://foursquare.com/{}", "check": lambda response: response.status_code == 200},
            "Roblox": {"url": "https://www.roblox.com/users/{}", "check": lambda response: response.status_code == 200},
            "Gumroad": {"url": "https://gumroad.com/{}", "check": lambda response: response.status_code == 200},
            "Newgrounds": {"url": "https://{}.newgrounds.com", "check": lambda response: response.status_code == 200},
            "Wattpad": {"url": "https://www.wattpad.com/user/{}", "check": lambda response: response.status_code == 200},
            "Canva": {"url": "https://www.canva.com/{}", "check": lambda response: response.status_code == 200},
            "CreativeMarket": {"url": "https://creativemarket.com/{}", "check": lambda response: response.status_code == 200},
            "Trakt": {"url": "https://trakt.tv/users/{}", "check": lambda response: response.status_code == 200},
            "500px": {"url": "https://500px.com/{}", "check": lambda response: response.status_code == 200},
            "Buzzfeed": {"url": "https://buzzfeed.com/{}", "check": lambda response: response.status_code == 200},
            "Tripadvisor": {"url": "https://tripadvisor.com/members/{}", "check": lambda response: response.status_code == 200},
            "Hubpages": {"url": "https://hubpages.com/@{}", "check": lambda response: response.status_code == 200},
            "Contently": {"url": "https://{}.contently.com", "check": lambda response: response.status_code == 200},
            "Houzz": {"url": "https://houzz.com/user/{}", "check": lambda response: response.status_code == 200},
            "Blip.fm": {"url": "https://blip.fm/{}", "check": lambda response: response.status_code == 200},
            "Wikipedia": {"url": "https://en.wikipedia.org/wiki/{}", "check": lambda response: response.status_code == 200},
            "Hackernews": {"url": "https://news.ycombinator.com/user?id={}", "check": lambda response: response.status_code == 200},
            "Codementor": {"url": "https://www.codementor.io/{}", "check": lambda response: response.status_code == 200},
            "Reverbnation": {"url": "https://www.reverbnation.com/{}", "check": lambda response: response.status_code == 200},
            "Designspiration": {"url": "https://www.designspiration.net/{}", "check": lambda response: response.status_code == 200},
            "Bandcamp": {"url": "https://bandcamp.com/{}", "check": lambda response: response.status_code == 200},
            "Colourlovers": {"url": "https://www.colourlovers.com/lover/{}", "check": lambda response: response.status_code == 200},
            "Ifttt": {"url": "https://ifttt.com/p/{}", "check": lambda response: response.status_code == 200},
            "Ebay": {"url": "https://www.ebay.com/usr/{}", "check": lambda response: response.status_code == 200},
            "Slack": {"url": "https://{}.slack.com", "check": lambda response: response.status_code == 200},
            "Okcupid": {"url": "https://www.okcupid.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Trip": {"url": "https://www.trip.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Ello": {"url": "https://ello.co/{}", "check": lambda response: response.status_code == 200},
            "Tracky": {"url": "https://tracky.com/{}", "check": lambda response: response.status_code == 200},
            "Tripit": {"url": "https://www.tripit.com/people/{}", "check": lambda response: response.status_code == 200},
            "Basecamp": {"url": "https://basecamp.com/{}", "check": lambda response: response.status_code == 200},
            "1337x": {"url": "https://www.1337x.to/user/{}", "check": lambda response: response.status_code == 200},
            "2Dimensions": {"url": "https://www.2dimensions.com/user/{}", "check": lambda response: response.status_code == 200},
            "3dnews": {"url": "https://3dnews.ru/user/{}", "check": lambda response: response.status_code == 200},
            "7Cups": {"url": "https://www.7cups.com/@{}", "check": lambda response: response.status_code == 200},
            "8tracks": {"url": "https://8tracks.com/{}", "check": lambda response: response.status_code == 200},
            "9GAG": {"url": "https://9gag.com/u/{}", "check": lambda response: response.status_code == 200},
            "APClips (NSFW)": {"url": "https://apclips.com/{}", "check": lambda response: response.status_code == 200},
            "Academia.edu": {"url": "https://independent.academia.edu/{}", "check": lambda response: response.status_code == 200},
            "AdmireMe.Vip (NSFW)": {"url": "https://admireme.vip/{}", "check": lambda response: response.status_code == 200},
            "Air Pilot Life": {"url": "https://airpilotlife.com/members/{}", "check": lambda response: response.status_code == 200},
            "Airbit": {"url": "https://www.airbit.com/{}", "check": lambda response: response.status_code == 200},
            "Airliners": {"url": "https://www.airliners.net/user/{}", "check": lambda response: response.status_code == 200},
            "All Things Worn (NSFW)": {"url": "https://www.allthingsworn.com/profile/{}", "check": lambda response: response.status_code == 200},
            "AllMyLinks": {"url": "https://allmylinks.com/{}", "check": lambda response: response.status_code == 200},
            "Amino": {"url": "https://aminoapps.com/c/{}", "check": lambda response: response.status_code == 200},
            "AniWorld": {"url": "https://aniworld.to/user/{}", "check": lambda response: response.status_code == 200},
            "Anilist": {"url": "https://anilist.co/user/{}", "check": lambda response: response.status_code == 200},
            "Apple Developer": {"url": "https://developer.apple.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Apple Discussions": {"url": "https://discussions.apple.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Archive of Our Own": {"url": "https://archiveofourown.org/users/{}", "check": lambda response: response.status_code == 200},
            "Archive.org": {"url": "https://archive.org/details/@{}", "check": lambda response: response.status_code == 200},
            "ArtStation": {"url": "https://www.artstation.com/{}", "check": lambda response: response.status_code == 200},
            "Asciinema": {"url": "https://asciinema.org/~{}", "check": lambda response: response.status_code == 200},
            "Ask Fedora": {"url": "https://ask.fedoraproject.org/u/{}", "check": lambda response: response.status_code == 200},
            "AskFM": {"url": "https://ask.fm/{}", "check": lambda response: response.status_code == 200},
            "Audiojungle": {"url": "https://audiojungle.net/user/{}", "check": lambda response: response.status_code == 200},
            "Autofrage": {"url": "https://autofrage.de/u/{}", "check": lambda response: response.status_code == 200},
            "Avizo": {"url": "https://avizo.cz/u/{}", "check": lambda response: response.status_code == 200},
            "BLIP.fm": {"url": "https://blip.fm/{}", "check": lambda response: response.status_code == 200},
            "BOOTH": {"url": "https://booth.pm/{}", "check": lambda response: response.status_code == 200},
            "Bazar.cz": {"url": "https://bazar.cz/user/{}", "check": lambda response: response.status_code == 200},
            "Bezuzyteczna": {"url": "https://bezuzyteczna.pl/uzytkownik/{}", "check": lambda response: response.status_code == 200},
            "BiggerPockets": {"url": "https://www.biggerpockets.com/users/{}", "check": lambda response: response.status_code == 200},
            "Bikemap": {"url": "https://www.bikemap.net/en/user/{}", "check": lambda response: response.status_code == 200},
            "BioHacking": {"url": "https://forum.biohack.me/index.php?p=/profile/{}", "check": lambda response: response.status_code == 200},
            "Bitwarden Forum": {"url": "https://community.bitwarden.com/u/{}", "check": lambda response: response.status_code == 200},
            "Blipfoto": {"url": "https://www.blipfoto.com/{}", "check": lambda response: response.status_code == 200},
            "BodyBuilding": {"url": "https://bodyspace.bodybuilding.com/{}", "check": lambda response: response.status_code == 200},
            "BongaCams (NSFW)": {"url": "https://bongacams.com/{}", "check": lambda response: response.status_code == 200},
            "Bookcrossing": {"url": "https://www.bookcrossing.com/mybookshelf/{}", "check": lambda response: response.status_code == 200},
            "BraveCommunity": {"url": "https://community.brave.com/u/{}", "check": lambda response: response.status_code == 200},
            "BugCrowd": {"url": "https://bugcrowd.com/{}", "check": lambda response: response.status_code == 200},
            "BuyMeACoffee": {"url": "https://www.buymeacoffee.com/{}", "check": lambda response: response.status_code == 200},
            "CGTrader": {"url": "https://www.cgtrader.com/{}", "check": lambda response: response.status_code == 200},
            "CNET": {"url": "https://www.cnet.com/profiles/{}", "check": lambda response: response.status_code == 200},
            "CSSBattle": {"url": "https://cssbattle.dev/player/{}", "check": lambda response: response.status_code == 200},
            "CTAN": {"url": "https://ctan.org/author/{}", "check": lambda response: response.status_code == 200},
            "Caddy Community": {"url": "https://caddy.community/u/{}", "check": lambda response: response.status_code == 200},
            "Car Talk Community": {"url": "https://community.cartalk.com/u/{}", "check": lambda response: response.status_code == 200},
            "Carbonmade": {"url": "https://carbonmade.com/{}", "check": lambda response: response.status_code == 200},
            "Ifttt": {"url": "https://ifttt.com/p/{}", "check": lambda response: response.status_code == 200},
            "Slack": {"url": "https://{}.slack.com", "check": lambda response: response.status_code == 200},
            "Okcupid": {"url": "https://www.okcupid.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Trip": {"url": "https://www.trip.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Ello": {"url": "https://ello.co/{}", "check": lambda response: response.status_code == 200},
            "Tracky": {"url": "https://tracky.com/{}", "check": lambda response: response.status_code == 200},
            "Tripit": {"url": "https://www.tripit.com/people/{}", "check": lambda response: response.status_code == 200},
            "Career.habr": {"url": "https://career.habr.com/{}", "check": lambda response: response.status_code == 200},
            "Championat": {"url": "https://www.championat.com/user/{}", "check": lambda response: response.status_code == 200},
            "Chaos": {"url": "https://chaos.social/@{}", "check": lambda response: response.status_code == 200},
            "Chatujme.cz": {"url": "https://chatujme.cz/profil/{}", "check": lambda response: response.status_code == 200},
            "ChaturBate (NSFW)": {"url": "https://chaturbate.com/{}", "check": lambda response: response.status_code == 200},
            "Chess": {"url": "https://www.chess.com/member/{}", "check": lambda response: response.status_code == 200},
            "Choice Community": {"url": "https://choice.community/u/{}", "check": lambda response: response.status_code == 200},
            "Clapper": {"url": "https://clapperapp.com/{}", "check": lambda response: response.status_code == 200},
            "CloudflareCommunity": {"url": "https://community.cloudflare.com/u/{}", "check": lambda response: response.status_code == 200},
            "Clozemaster": {"url": "https://www.clozemaster.com/players/{}", "check": lambda response: response.status_code == 200},
            "Clubhouse": {"url": "https://www.clubhouse.com/@{}", "check": lambda response: response.status_code == 200},
            "Code Snippet Wiki": {"url": "https://codesnippet.wiki/u/{}", "check": lambda response: response.status_code == 200},
            "Codeberg": {"url": "https://codeberg.org/{}", "check": lambda response: response.status_code == 200},
            "Codechef": {"url": "https://www.codechef.com/users/{}", "check": lambda response: response.status_code == 200},
            "Codeforces": {"url": "https://codeforces.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Codepen": {"url": "https://codepen.io/{}", "check": lambda response: response.status_code == 200},
            "Coders Rank": {"url": "https://profile.codersrank.io/user/{}", "check": lambda response: response.status_code == 200},
            "Coderwall": {"url": "https://coderwall.com/{}", "check": lambda response: response.status_code == 200},
            "Codewars": {"url": "https://www.codewars.com/users/{}", "check": lambda response: response.status_code == 200},
            "Coinvote": {"url": "https://www.coinvote.cc/user/{}", "check": lambda response: response.status_code == 200},
            "Contently": {"url": "https://{}.contently.com", "check": lambda response: response.status_code == 200},
            "Coroflot": {"url": "https://www.coroflot.com/{}", "check": lambda response: response.status_code == 200},
            "Cracked": {"url": "https://www.cracked.com/members/{}", "check": lambda response: response.status_code == 200},
            "Crevado": {"url": "https://crevado.com/{}", "check": lambda response: response.status_code == 200},
            "Crowdin": {"url": "https://crowdin.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Cryptomator Forum": {"url": "https://community.cryptomator.org/u/{}", "check": lambda response: response.status_code == 200},
            "Cults3D": {"url": "https://cults3d.com/en/users/{}", "check": lambda response: response.status_code == 200},
            "CyberDefenders": {"url": "https://cyberdefenders.org/profile/{}", "check": lambda response: response.status_code == 200},
            "DEV Community": {"url": "https://dev.to/{}", "check": lambda response: response.status_code == 200},
            "DMOJ": {"url": "https://dmoj.ca/user/{}", "check": lambda response: response.status_code == 200},
            "Dealabs": {"url": "https://www.dealabs.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Discuss.Elastic.co": {"url": "https://discuss.elastic.co/u/{}", "check": lambda response: response.status_code == 200},
            "Docker Hub": {"url": "https://hub.docker.com/u/{}", "check": lambda response: response.status_code == 200},
            "Duolingo": {"url": "https://www.duolingo.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Eintracht Frankfurt Forum": {"url": "https://community.eintracht.de/fans/{}", "check": lambda response: response.status_code == 200},
            "Envato Forum": {"url": "https://forums.envato.com/u/{}", "check": lambda response: response.status_code == 200},
            "Erome (NSFW)": {"url": "https://www.erome.com/{}", "check": lambda response: response.status_code == 200},
            "Exposure": {"url": "https://{}.exposure.co", "check": lambda response: response.status_code == 200},
            "EyeEm": {"url": "https://www.eyeem.com/u/{}", "check": lambda response: response.status_code == 200},
            "F3.cool": {"url": "https://f3.cool/u/{}", "check": lambda response: response.status_code == 200},
            "Fameswap": {"url": "https://fameswap.com/user/{}", "check": lambda response: response.status_code == 200},
            "Fandom": {"url": "https://www.fandom.com/u/{}", "check": lambda response: response.status_code == 200},
            "Finanzfrage": {"url": "https://www.finanzfrage.net/u/{}", "check": lambda response: response.status_code == 200},
            "Fiverr": {"url": "https://www.fiverr.com/{}", "check": lambda response: response.status_code == 200},
            "Flightradar24": {"url": "https://www.flightradar24.com/user/{}", "check": lambda response: response.status_code == 200},
            "Football": {"url": "https://www.football.com/users/{}", "check": lambda response: response.status_code == 200},
            "FortniteTracker": {"url": "https://fortnitetracker.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Forum Ophilia (NSFW)": {"url": "https://forum.ophelia.com/u/{}", "check": lambda response: response.status_code == 200},
            "Fosstodon": {"url": "https://fosstodon.org/@{}", "check": lambda response: response.status_code == 200},
            "Freelance.habr": {"url": "https://freelance.habr.com/freelancers/{}", "check": lambda response: response.status_code == 200},
            "Freelancer": {"url": "https://www.freelancer.com/u/{}", "check": lambda response: response.status_code == 200},
            "Freesound": {"url": "https://freesound.org/people/{}", "check": lambda response: response.status_code == 200},
            "GNOME VCS": {"url": "https://gitlab.gnome.org/{}", "check": lambda response: response.status_code == 200},
            "GaiaOnline": {"url": "https://www.gaiaonline.com/profiles/{}", "check": lambda response: response.status_code == 200},
            "Gamespot": {"url": "https://www.gamespot.com/profile/{}", "check": lambda response: response.status_code == 200},
            "GeeksforGeeks": {"url": "https://auth.geeksforgeeks.org/user/{}", "check": lambda response: response.status_code == 200},
            "Genius (Artists)": {"url": "https://genius.com/artists/{}", "check": lambda response: response.status_code == 200},
            "Genius (Users)": {"url": "https://genius.com/{}", "check": lambda response: response.status_code == 200},
            "Gesundheitsfrage": {"url": "https://www.gesundheitsfrage.net/u/{}", "check": lambda response: response.status_code == 200},
            "GetMyUni": {"url": "https://www.getmyuni.com/users/{}", "check": lambda response: response.status_code == 200},
            "Giant Bomb": {"url": "https://www.giantbomb.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Giphy": {"url": "https://giphy.com/{}", "check": lambda response: response.status_code == 200},
            "GitBook": {"url": "https://{}.gitbook.io", "check": lambda response: response.status_code == 200},
            "GitLab": {"url": "https://gitlab.com/{}", "check": lambda response: response.status_code == 200},
            "Gitee": {"url": "https://gitee.com/{}", "check": lambda response: response.status_code == 200},
            "Google Play": {"url": "https://play.google.com/store/apps/developer?id={}", "check": lambda response: response.status_code == 200},
            "Gradle": {"url": "https://gradle.com/u/{}", "check": lambda response: response.status_code == 200},
            "Grailed": {"url": "https://www.grailed.com/{}", "check": lambda response: response.status_code == 200},
            "HackTheBox": {"url": "https://app.hackthebox.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Hackaday": {"url": "https://hackaday.io/{}", "check": lambda response: response.status_code == 200},
            "HackenProof (Hackers)": {"url": "https://hackenproof.com/{}", "check": lambda response: response.status_code == 200},
            "HackerEarth": {"url": "https://www.hackerearth.com/@{}", "check": lambda response: response.status_code == 200},
            "HackerOne": {"url": "https://hackerone.com/{}", "check": lambda response: response.status_code == 200},
            "HackerRank": {"url": "https://www.hackerrank.com/{}", "check": lambda response: response.status_code == 200},
            "Harvard Scholar": {"url": "https://scholar.harvard.edu/{}", "check": lambda response: response.status_code == 200},
            "Hashnode": {"url": "https://hashnode.com/@{}", "check": lambda response: response.status_code == 200},
            "Heavy-R (NSFW)": {"url": "https://www.heavy-r.com/user/{}", "check": lambda response: response.status_code == 200},
            "Holopin": {"url": "https://holopin.io/@{}", "check": lambda response: response.status_code == 200},
            "Houzz": {"url": "https://houzz.com/user/{}", "check": lambda response: response.status_code == 200},
            "HubPages": {"url": "https://hubpages.com/@{}", "check": lambda response: response.status_code == 200},
            "Hubski": {"url": "https://hubski.com/user/{}", "check": lambda response: response.status_code == 200},
            "HudsonRock": {"url": "https://hudsonrock.com/@{}", "check": lambda response: response.status_code == 200},
            "ICQ": {"url": "https://icq.com/people/{}", "check": lambda response: response.status_code == 200},
            "IRC-Galleria": {"url": "https://irc-galleria.net/user/{}", "check": lambda response: response.status_code == 200},
            "Icons8 Community": {"url": "https://community.icons8.com/u/{}", "check": lambda response: response.status_code == 200},
            "Image Fap (NSFW)": {"url": "https://www.imagefap.com/profile/{}", "check": lambda response: response.status_code == 200},
            "ImgUp.cz": {"url": "https://www.imgup.cz/profile/{}", "check": lambda response: response.status_code == 200},
            "Intigriti": {"url": "https://app.intigriti.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Ionic Forum": {"url": "https://forum.ionicframework.com/u/{}", "check": lambda response: response.status_code == 200},
            "Issuu": {"url": "https://issuu.com/{}", "check": lambda response: response.status_code == 200},
            "Itch.io": {"url": "https://{}.itch.io", "check": lambda response: response.status_code == 200},
            "Itemfix": {"url": "https://www.itemfix.com/user/{}", "check": lambda response: response.status_code == 200},
            "Jellyfin Weblate": {"url": "https://weblate.jellyfin.org/accounts/{}", "check": lambda response: response.status_code == 200},
            "Jimdo": {"url": "https://{}.jimdosite.com", "check": lambda response: response.status_code == 200},
            "Joplin Forum": {"url": "https://discourse.joplinapp.org/u/{}", "check": lambda response: response.status_code == 200},
            "KEAKR": {"url": "https://keakr.com/user/{}", "check": lambda response: response.status_code == 200},
            "Kaggle": {"url": "https://www.kaggle.com/{}", "check": lambda response: response.status_code == 200},
            "Kick": {"url": "https://kick.com/{}", "check": lambda response: response.status_code == 200},
            "Kik": {"url": "https://www.kik.com/u/{}", "check": lambda response: response.status_code == 200},
            "Kofi": {"url": "https://ko-fi.com/{}", "check": lambda response: response.status_code == 200},
            "Kwork": {"url": "https://kwork.ru/user/{}", "check": lambda response: response.status_code == 200},
            "LOR": {"url": "https://www.linux.org.ru/people/{}", "check": lambda response: response.status_code == 200},
            "Launchpad": {"url": "https://launchpad.net/~{}", "check": lambda response: response.status_code == 200},
            "LeetCode": {"url": "https://leetcode.com/{}", "check": lambda response: response.status_code == 200},
            "LessWrong": {"url": "https://www.lesswrong.com/users/{}", "check": lambda response: response.status_code == 200},
            "Letterboxd": {"url": "https://letterboxd.com/{}", "check": lambda response: response.status_code == 200},
            "LibraryThing": {"url": "https://www.librarything.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Lichess": {"url": "https://lichess.org/@/{}", "check": lambda response: response.status_code == 200},
            "LinkedIn": {"url": "https://www.linkedin.com/in/{}", "check": lambda response: response.status_code == 200},
            "Linktree": {"url": "https://linktr.ee/{}", "check": lambda response: response.status_code == 200},
            "Listed": {"url": "https://listed.to/@{}", "check": lambda response: response.status_code == 200},
            "Lobsters": {"url": "https://lobste.rs/u/{}", "check": lambda response: response.status_code == 200},
            "LottieFiles": {"url": "https://lottiefiles.com/{}", "check": lambda response: response.status_code == 200},
            "LushStories (NSFW)": {"url": "https://lushstories.com/{}", "check": lambda response: response.status_code == 200},
            "MMORPG Forum": {"url": "https://forums.mmorpg.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Mapify": {"url": "https://mapify.travel/@{}", "check": lambda response: response.status_code == 200},
            "Memrise": {"url": "https://www.memrise.com/user/{}", "check": lambda response: response.status_code == 200},
            "Minecraft": {"url": "https://minecraft.net/en-us/profile/{}", "check": lambda response: response.status_code == 200},
            "Monkeytype": {"url": "https://monkeytype.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Motherless (NSFW)": {"url": "https://motherless.com/{}", "check": lambda response: response.status_code == 200},
            "Motorradfrage": {"url": "https://www.motorradfrage.net/u/{}", "check": lambda response: response.status_code == 200},
            "MyAnimeList": {"url": "https://myanimelist.net/profile/{}", "check": lambda response: response.status_code == 200},
            "MyMiniFactory": {"url": "https://www.myminifactory.com/users/{}", "check": lambda response: response.status_code == 200},
            "Mydramalist": {"url": "https://mydramalist.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Myspace": {"url": "https://myspace.com/{}", "check": lambda response: response.status_code == 200},
            "NICommunityForum": {"url": "https://forums.ni.com/t5/user/viewprofilepage/user-id/{}", "check": lambda response: response.status_code == 200},
            "NationStates Nation": {"url": "https://www.nationstates.net/nation={}", "check": lambda response: response.status_code == 200},
            "NationStates Region": {"url": "https://www.nationstates.net/region={}", "check": lambda response: response.status_code == 200},
            "Naver": {"url": "https://blog.naver.com/{}", "check": lambda response: response.status_code == 200},
            "Needrom": {"url": "https://www.needrom.com/author/{}", "check": lambda response: response.status_code == 200},
            "Nextcloud Forum": {"url": "https://help.nextcloud.com/u/{}", "check": lambda response: response.status_code == 200},
            "Nightbot": {"url": "https://nightbot.tv/u/{}", "check": lambda response: response.status_code == 200},
            "Ninja Kiwi": {"url": "https://forums.ninjakiwi.com/user/{}", "check": lambda response: response.status_code == 200},
            "NintendoLife": {"url": "https://www.nintendolife.com/users/{}", "check": lambda response: response.status_code == 200},
            "NitroType": {"url": "https://www.nitrotype.com/racer/{}", "check": lambda response: response.status_code == 200},
            "NotABug.org": {"url": "https://notabug.org/{}", "check": lambda response: response.status_code == 200},
            "Nyaa.si": {"url": "https://nyaa.si/user/{}", "check": lambda response: response.status_code == 200},
            "OGUsers": {"url": "https://ogusers.com/member.php?action=profile&uid={}", "check": lambda response: response.status_code == 200},
            "OpenStreetMap": {"url": "https://www.openstreetmap.org/user/{}", "check": lambda response: response.status_code == 200},
            "Opensource": {"url": "https://opensource.com/users/{}", "check": lambda response: response.status_code == 200},
            "OurDJTalk": {"url": "https://ourdjtalk.com/members/{}", "check": lambda response: response.status_code == 200},
            "PCGamer": {"url": "https://forums.pcgamer.com/members/{}", "check": lambda response: response.status_code == 200},
            "PSNProfiles.com": {"url": "https://psnprofiles.com/{}", "check": lambda response: response.status_code == 200},
            "Packagist": {"url": "https://packagist.org/users/{}", "check": lambda response: response.status_code == 200},
            "Patreon": {"url": "https://www.patreon.com/{}", "check": lambda response: response.status_code == 200},
            "PentesterLab": {"url": "https://pentesterlab.com/profile/{}", "check": lambda response: response.status_code == 200},
            "PepperIT": {"url": "https://pepperit.com.au/member/{}", "check": lambda response: response.status_code == 200},
            "Periscope": {"url": "https://www.pscp.tv/{}", "check": lambda response: response.status_code == 200},
            "Pinkbike": {"url": "https://www.pinkbike.com/u/{}", "check": lambda response: response.status_code == 200},
            "PlayStore": {"url": "https://play.google.com/store/apps/developer?id={}", "check": lambda response: response.status_code == 200},
            "PocketStars (NSFW)": {"url": "https://pocketstars.com/{}", "check": lambda response: response.status_code == 200},
            "Pokemon Showdown": {"url": "https://pokemonshowdown.com/users/{}", "check": lambda response: response.status_code == 200},
            "Polarsteps": {"url": "https://polarsteps.com/{}", "check": lambda response: response.status_code == 200},
            "Polygon": {"url": "https://www.polygon.com/users/{}", "check": lambda response: response.status_code == 200},
            "Polymart": {"url": "https://polymart.org/user/{}", "check": lambda response: response.status_code == 200},
            "Pornhub (NSFW)": {"url": "https://www.pornhub.com/users/{}", "check": lambda response: response.status_code == 200},
            "ProductHunt": {"url": "https://www.producthunt.com/@{}", "check": lambda response: response.status_code == 200},
            "PromoDJ": {"url": "https://promodj.com/{}", "check": lambda response: response.status_code == 200},
            "PyPi": {"url": "https://pypi.org/user/{}", "check": lambda response: response.status_code == 200},
            "Rajce.net": {"url": "https://www.rajce.idnes.cz/user/{}", "check": lambda response: response.status_code == 200},
            "Rate Your Music": {"url": "https://rateyourmusic.com/~{}", "check": lambda response: response.status_code == 200},
            "Rclone Forum": {"url": "https://forum.rclone.org/u/{}", "check": lambda response: response.status_code == 200},
            "RedTube (NSFW)": {"url": "https://www.redtube.com/users/{}", "check": lambda response: response.status_code == 200},
            "Redbubble": {"url": "https://www.redbubble.com/people/{}", "check": lambda response: response.status_code == 200},
            "Reisefrage": {"url": "https://www.reisefrage.net/u/{}", "check": lambda response: response.status_code == 200},
            "Replit.com": {"url": "https://replit.com/@{}", "check": lambda response: response.status_code == 200},
            "ResearchGate": {"url": "https://www.researchgate.net/profile/{}", "check": lambda response: response.status_code == 200},
            "RoyalCams": {"url": "https://www.royalcams.com/profile/{}", "check": lambda response: response.status_code == 200},
            "RubyGems": {"url": "https://rubygems.org/profiles/{}", "check": lambda response: response.status_code == 200},
            "Rumble": {"url": "https://rumble.com/{}", "check": lambda response: response.status_code == 200},
            "RuneScape": {"url": "https://secure.runescape.com/m=player-profiles/profile?user={}", "check": lambda response: response.status_code == 200},
            "SWAPD": {"url": "https://swapd.co/u/{}", "check": lambda response: response.status_code == 200},
            "Sbazar.cz": {"url": "https://www.sbazar.cz/{}", "check": lambda response: response.status_code == 200},
            "Scratch": {"url": "https://scratch.mit.edu/users/{}", "check": lambda response: response.status_code == 200},
            "ShitpostBot5000": {"url": "https://www.shitpostbot.com/user/{}", "check": lambda response: response.status_code == 200},
            "Shpock": {"url": "https://www.shpock.com/en-gb/profile/{}", "check": lambda response: response.status_code == 200},
            "Signal": {"url": "https://community.signalusers.org/u/{}", "check": lambda response: response.status_code == 200},
            "Sketchfab": {"url": "https://sketchfab.com/{}", "check": lambda response: response.status_code == 200},
            "Slant": {"url": "https://www.slant.co/users/{}", "check": lambda response: response.status_code == 200},
            "Slashdot": {"url": "https://slashdot.org/~{}", "check": lambda response: response.status_code == 200},
            "SlideShare": {"url": "https://www.slideshare.net/{}", "check": lambda response: response.status_code == 200},
            "Slides": {"url": "https://slides.com/{}", "check": lambda response: response.status_code == 200},
            "SmugMug": {"url": "https://www.smugmug.com/{}", "check": lambda response: response.status_code == 200},
            "Smule": {"url": "https://www.smule.com/{}", "check": lambda response: response.status_code == 200},
            "Snapchat": {"url": "https://www.snapchat.com/add/{}", "check": lambda response: response.status_code == 200},
            "SourceForge": {"url": "https://sourceforge.net/u/{}/profile", "check": lambda response: response.status_code == 200},
            "SoylentNews": {"url": "https://soylentnews.org/~{}", "check": lambda response: response.status_code == 200},
            "Speedrun.com": {"url": "https://www.speedrun.com/user/{}", "check": lambda response: response.status_code == 200},
            "Spells8": {"url": "https://spells8.com/members/{}", "check": lambda response: response.status_code == 200},
            "Splice": {"url": "https://splice.com/{}", "check": lambda response: response.status_code == 200},
            "Splits.io": {"url": "https://splits.io/users/{}", "check": lambda response: response.status_code == 200},
            "Sporcle": {"url": "https://www.sporcle.com/user/{}", "check": lambda response: response.status_code == 200},
            "Sportlerfrage": {"url": "https://www.sportlerfrage.net/u/{}", "check": lambda response: response.status_code == 200},
            "SportsRU": {"url": "https://www.sports.ru/profile/{}", "check": lambda response: response.status_code == 200},
            "Star Citizen": {"url": "https://robertsspaceindustries.com/citizens/{}", "check": lambda response: response.status_code == 200},
            "Steam Community (Group)": {"url": "https://steamcommunity.com/groups/{}", "check": lambda response: response.status_code == 200},
            "Steam Community (User)": {"url": "https://steamcommunity.com/id/{}", "check": lambda response: response.status_code == 200},
            "Strava": {"url": "https://www.strava.com/athletes/{}", "check": lambda response: response.status_code == 200},
            "SublimeForum": {"url": "https://forum.sublimetext.com/u/{}", "check": lambda response: response.status_code == 200},
            "TETR.IO": {"url": "https://ch.tetr.io/u/{}", "check": lambda response: response.status_code == 200},
            "TLDR Legal": {"url": "https://tldrlegal.com/users/{}", "check": lambda response: response.status_code == 200},
            "TRAKTRAIN": {"url": "https://traktrain.com/{}", "check": lambda response: response.status_code == 200},
            "Telegram": {"url": "https://t.me/{}", "check": lambda response: response.status_code == 200},
            "Tellonym.me": {"url": "https://tellonym.me/{}", "check": lambda response: response.status_code == 200},
            "Tenor": {"url": "https://tenor.com/users/{}", "check": lambda response: response.status_code == 200},
            "ThemeForest": {"url": "https://themeforest.net/user/{}", "check": lambda response: response.status_code == 200},
            "TnAFlix (NSFW)": {"url": "https://www.tnaflix.com/profile/{}", "check": lambda response: response.status_code == 200},
            "TorrentGalaxy": {"url": "https://torrentgalaxy.to/profile/{}", "check": lambda response: response.status_code == 200},
            "TradingView": {"url": "https://www.tradingview.com/u/{}", "check": lambda response: response.status_code == 200},
            "TrashboxRU": {"url": "https://trashbox.ru/user/{}", "check": lambda response: response.status_code == 200},
            "Trawelling": {"url": "https://trawelling.com/profile/{}", "check": lambda response: response.status_code == 200},
            "Trello": {"url": "https://trello.com/{}", "check": lambda response: response.status_code == 200},
            "TryHackMe": {"url": "https://tryhackme.com/p/{}", "check": lambda response: response.status_code == 200},
            "Tuna": {"url": "https://tuna.voicemod.net/u/{}", "check": lambda response: response.status_code == 200},
            "Tweakers": {"url": "https://tweakers.net/gallery/{}", "check": lambda response: response.status_code == 200},
            "Twitch": {"url": "https://www.twitch.tv/{}", "check": lambda response: response.status_code == 200},
            "Typeracer": {"url": "https://data.typeracer.com/pit/profile?user={}", "check": lambda response: response.status_code == 200},
            "Ultimate-Guitar": {"url": "https://ultimate-guitar.com/u/{}", "check": lambda response: response.status_code == 200},
            "Unsplash": {"url": "https://unsplash.com/@{}", "check": lambda response: response.status_code == 200},
            "Untappd": {"url": "https://untappd.com/user/{}", "check": lambda response: response.status_code == 200},
            "VK": {"url": "https://vk.com/{}", "check": lambda response: response.status_code == 200},
            "VSCO": {"url": "https://vsco.co/{}", "check": lambda response: response.status_code == 200},
            "Velomania": {"url": "https://forum.velomania.ru/member.php?username={}", "check": lambda response: response.status_code == 200},
            "Venmo": {"url": "https://venmo.com/{}", "check": lambda response: response.status_code == 200},
            "Vero": {"url": "https://www.vero.co/{}", "check": lambda response: response.status_code == 200},
            "VirusTotal": {"url": "https://www.virustotal.com/gui/user/{}", "check": lambda response: response.status_code == 200},
            "WICG Forum": {"url": "https://discourse.wicg.io/u/{}", "check": lambda response: response.status_code == 200},
            "Warrior Forum": {"url": "https://www.warriorforum.com/members/{}", "check": lambda response: response.status_code == 200},
            "WebNode": {"url": "https://{}.webnode.cz", "check": lambda response: response.status_code == 200},
            "Weblate": {"url": "https://hosted.weblate.org/user/{}", "check": lambda response: response.status_code == 200},
            "Weebly": {"url": "https://{}.weebly.com", "check": lambda response: response.status_code == 200},
            "Wikidot": {"url": "http://www.wikidot.com/user:info/{}", "check": lambda response: response.status_code == 200},
            "Windy": {"url": "https://community.windy.com/user/{}", "check": lambda response: response.status_code == 200},
            "Wix": {"url": "https://{}.wixsite.com", "check": lambda response: response.status_code == 200},
            "WolframalphaForum": {"url": "https://community.wolfram.com/web/{}", "check": lambda response: response.status_code == 200},
            "WordPressOrg": {"url": "https://profiles.wordpress.org/{}", "check": lambda response: response.status_code == 200},
            "Wordnik": {"url": "https://www.wordnik.com/users/{}", "check": lambda response: response.status_code == 200},
            "Wykop": {"url": "https://www.wykop.pl/ludzie/{}", "check": lambda response: response.status_code == 200},
            "Xbox Gamertag": {"url": "https://xboxgamertag.com/search/{}", "check": lambda response: response.status_code == 200},
            "Xvideos (NSFW)": {"url": "https://www.xvideos.com/profiles/{}", "check": lambda response: response.status_code == 200},
            "YandexMusic": {"url": "https://music.yandex.ru/users/{}", "check": lambda response: response.status_code == 200},
            "YouNow": {"url": "https://www.younow.com/{}", "check": lambda response: response.status_code == 200},
            "YouPic": {"url": "https://youpic.com/photographer/{}", "check": lambda response: response.status_code == 200},
            "YouPorn (NSFW)": {"url": "https://www.youporn.com/user/{}", "check": lambda response: response.status_code == 200},
            "akniga": {"url": "https://akniga.org/profile/{}", "check": lambda response: response.status_code == 200},
            "authorSTREAM": {"url": "https://www.authorstream.com/{}/", "check": lambda response: response.status_code == 200},
            "babyRU": {"url": "https://www.baby.ru/u/{}/", "check": lambda response: response.status_code == 200},
            "babyblogRU": {"url": "https://www.babyblog.ru/user/info/{}/", "check": lambda response: response.status_code == 200},
            "chaos.social": {"url": "https://chaos.social/@{}", "check": lambda response: response.status_code == 200},
            "couchsurfing": {"url": "https://www.couchsurfing.com/people/{}", "check": lambda response: response.status_code == 200},
            "d3RU": {"url": "https://d3.ru/user/{}/", "check": lambda response: response.status_code == 200},
            "dailykos": {"url": "https://www.dailykos.com/user/{}/", "check": lambda response: response.status_code == 200},
            "datingRU": {"url": "https://dating.ru/{}/", "check": lambda response: response.status_code == 200},
            "devRant": {"url": "https://devrant.com/users/{}", "check": lambda response: response.status_code == 200},
            "drive2": {"url": "https://www.drive2.ru/users/{}/", "check": lambda response: response.status_code == 200},
            "eGPU": {"url": "https://egpu.io/forums/profile/{}", "check": lambda response: response.status_code == 200},
            "eintracht": {"url": "https://community.eintracht.de/fans/{}", "check": lambda response: response.status_code == 200},
            "fixya": {"url": "https://www.fixya.com/users/{}", "check": lambda response: response.status_code == 200},
            "fl": {"url": "https://fl.ru/users/{}", "check": lambda response: response.status_code == 200},
            "forum_guns": {"url": "https://forum.guns.ru/forummember/{}", "check": lambda response: response.status_code == 200},
            "freecodecamp": {"url": "https://www.freecodecamp.org/{}", "check": lambda response: response.status_code == 200},
            "furaffinity": {"url": "https://www.furaffinity.net/user/{}", "check": lambda response: response.status_code == 200},
            "geocaching": {"url": "https://www.geocaching.com/p/default.aspx?u={}", "check": lambda response: response.status_code == 200},
            "gfycat": {"url": "https://gfycat.com/@{}", "check": lambda response: response.status_code == 200},
            "habr": {"url": "https://habr.com/ru/users/{}", "check": lambda response: response.status_code == 200},
            "hackster": {"url": "https://www.hackster.io/{}", "check": lambda response: response.status_code == 200},
            "hunting": {"url": "https://hunting.ru/profile/{}", "check": lambda response: response.status_code == 200},
            "iMGSRC.RU": {"url": "https://imgsrc.ru/main/user.php?nick={}", "check": lambda response: response.status_code == 200},
            "igromania": {"url": "https://www.igromania.ru/user/{}", "check": lambda response: response.status_code == 200},
            "interpals": {"url": "https://www.interpals.net/{}", "check": lambda response: response.status_code == 200},
            "irecommend": {"url": "https://irecommend.ru/users/{}", "check": lambda response: response.status_code == 200},
            "jbzd.com.pl": {"url": "https://jbzd.com.pl/uzytkownik/{}", "check": lambda response: response.status_code == 200},
            "jeuxvideo": {"url": "https://www.jeuxvideo.com/profil/{}", "check": lambda response: response.status_code == 200},
            "leasehackr": {"url": "https://forum.leasehackr.com/u/{}", "check": lambda response: response.status_code == 200},
            "livelib": {"url": "https://www.livelib.ru/reader/{}", "check": lambda response: response.status_code == 200},
            "mastodon.cloud": {"url": "https://mastodon.cloud/@{}", "check": lambda response: response.status_code == 200},
            "mastodon.social": {"url": "https://mastodon.social/@{}", "check": lambda response: response.status_code == 200},
            "mastodon.technology": {"url": "https://mastodon.technology/@{}", "check": lambda response: response.status_code == 200},
            "mastodon.xyz": {"url": "https://mastodon.xyz/@{}", "check": lambda response: response.status_code == 200},
            "mercadolivre": {"url": "https://perfil.mercadolivre.com.br/{}", "check": lambda response: response.status_code == 200},
            "minds": {"url": "https://www.minds.com/{}", "check": lambda response: response.status_code == 200},
            "moikrug": {"url": "https://moikrug.ru/{}", "check": lambda response: response.status_code == 200},
            "mstdn.io": {"url": "https://mstdn.io/@{}", "check": lambda response: response.status_code == 200},
            "nairaland.com": {"url": "https://www.nairaland.com/{}", "check": lambda response: response.status_code == 200},
            "nnRU": {"url": "https://www.nn.ru/~{}", "check": lambda response: response.status_code == 200},
            "note": {"url": "https://note.com/{}/", "check": lambda response: response.status_code == 200},
            "npm": {"url": "https://www.npmjs.com/~{}", "check": lambda response: response.status_code == 200},
            "opennet": {"url": "https://www.opennet.ru/~{}", "check": lambda response: response.status_code == 200},
            "osu!": {"url": "https://osu.ppy.sh/users/{}", "check": lambda response: response.status_code == 200},
            "phpRU": {"url": "https://php.ru/forum/member.php?username={}", "check": lambda response: response.status_code == 200},
            "pikabu": {"url": "https://pikabu.ru/@{}", "check": lambda response: response.status_code == 200},
            "pr0gramm": {"url": "https://pr0gramm.com/user/{}", "check": lambda response: response.status_code == 200},
            "prog.hu": {"url": "https://prog.hu/user/{}", "check": lambda response: response.status_code == 200},
            "queer.af": {"url": "https://queer.af/@{}", "check": lambda response: response.status_code == 200},
            "satsisRU": {"url": "https://forum.satsavvy.com/user/{}", "check": lambda response: response.status_code == 200},
            "sessionize": {"url": "https://sessionize.com/{}", "check": lambda response: response.status_code == 200},
            "skyrock": {"url": "https://{}.skyrock.com", "check": lambda response: response.status_code == 200},
            "social.tchncs.de": {"url": "https://social.tchncs.de/@{}", "check": lambda response: response.status_code == 200},
            "spletnik": {"url": "https://spletnik.ru/profile/{}/", "check": lambda response: response.status_code == 200},
            "svidbook": {"url": "https://svidbook.ru/u/{}", "check": lambda response: response.status_code == 200},
            "toster": {"url": "https://toster.ru/user/{}", "check": lambda response: response.status_code == 200},
            "uid": {"url": "https://uid.me/{}", "check": lambda response: response.status_code == 200},
            "wiki.vg": {"url": "https://wiki.vg/User:{}", "check": lambda response: response.status_code == 200},
            "xHamster (NSFW)": {"url": "https://xhamster.com/users/{}", "check": lambda response: response.status_code == 200},
            "znanylekarz.pl": {"url": "https://www.znanylekarz.pl/placowka/{}", "check": lambda response: response.status_code == 200},
        }


    def banner(self):
        print(f"""{Fore.LIGHTRED_EX}
              _____             _____            _       _ _                 _                
             / ____|           / ____|          (_)     | | |               | |               
            | |  __  ___ _ __ | (___   ___   ___ _  __ _| | |     ___   ___ | | ___   _ _ __  
            | | |_ |/ _ \ '_ \ \___ \ / _ \ / __| |/ _` | | |    / _ \ / _ \| |/ / | | | '_ \ 
            | |__| |  __/ | | |____) | (_) | (__| | (_| | | |___| (_) | (_) |   <| |_| | |_) |
             \_____|\___|_| |_|_____/ \___/ \___|_|\__,_|_|______\___/ \___/|_|\_\\__,_| .__/ 
                                                                                       | |    
                                                                                       |_|    
                                        {Fore.LIGHTWHITE_EX}by geniuszly
        """)

    def input_username(self):
        self.username = input(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» Введите имя пользователя: {Fore.LIGHTGREEN_EX}")

    def remove_previous_file(self):
        try:
            open(self.output_file, 'w').close()
            print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTWHITE_EX}Файл {Fore.LIGHTGREEN_EX}{self.output_file} {Fore.LIGHTWHITE_EX}создан и очищен.")
        except Exception as e:
            print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTYELLOW_EX}Ошибка при очистке файла: {Fore.LIGHTRED_EX}{e}")


    def check_username(self):
        found_count = 0
        total_count = len(self.platforms)
        start_time = time.time()
        with open(self.output_file, 'w') as f:
            for platform, data in self.platforms.items():
                if self.check_platform(platform, data['url'], data['check'], f):
                    found_count += 1
        end_time = time.time()
        elapsed_time = end_time - start_time
        print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTWHITE_EX}Проверка завершена.")
        print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTWHITE_EX}Найдено: {Fore.LIGHTGREEN_EX}{found_count} {Fore.LIGHTWHITE_EX}из {Fore.LIGHTGREEN_EX}{total_count} {Fore.LIGHTWHITE_EX}сайтов.")
        print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTWHITE_EX}Затраченное время: {Fore.LIGHTGREEN_EX}{elapsed_time:.2f} {Fore.LIGHTWHITE_EX}секунд.")
        print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTWHITE_EX}Результаты поиска сохранены в файл {Fore.LIGHTGREEN_EX}{self.output_file}.")

    def check_platform(self, platform, url_template, check_function, file):
        check_url = url_template.format(self.username)
        try:
            response = requests.get(check_url, timeout=10)
            if check_function(response):
                print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTGREEN_EX}{platform} {Fore.LIGHTWHITE_EX}Найден! {Fore.LIGHTGREEN_EX}{check_url}")
                file.write(f"{check_url}\n")
                return True
            else:
                print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTRED_EX}{platform} {Fore.LIGHTYELLOW_EX}Не найден.")
        except requests.exceptions.RequestException as e:
            print(f"{Fore.LIGHTYELLOW_EX}[ {Fore.LIGHTRED_EX}GenSocialLookup {Fore.LIGHTYELLOW_EX}] {Fore.LIGHTBLUE_EX}» {Fore.LIGHTGREEN_EX}{platform}: {Fore.LIGHTYELLOW_EX}Ошибка при подключении {Fore.LIGHTRED_EX}{e}.")
        return False
    

    def run(self):
        self.banner()
        self.input_username()
        self.remove_previous_file()
        self.check_username()

if __name__ == "__main__":
    lookup = GenSocialLookup()
    lookup.run()